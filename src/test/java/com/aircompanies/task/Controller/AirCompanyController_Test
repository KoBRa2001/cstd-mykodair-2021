package com.softserve.itacademy.controller;

import com.softserve.itacademy.config.SpringSecurityTestConfiguration;
import com.softserve.itacademy.config.WithMockCustomUser;
import com.softserve.itacademy.model.Role;
import com.softserve.itacademy.model.User;
import com.softserve.itacademy.service.RoleService;
import com.softserve.itacademy.service.AirCompanyService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@ExtendWith(SpringExtension.class)
@WebMvcTest
@AutoConfigureMockMvc
@ContextConfiguration(classes = { AirCompanyController.class, SpringSecurityTestConfiguration.class })
public class AirCompanyControllerTest {

    @MockBean private AirCompanyService airCompanyService;

    @Autowired
    private MockMvc mvc;

    @Autowired
    @Qualifier("airCompany")
    private AirCompany airCompany;

    @Test
    public void testCorrectCreatePostMethod() throws Exception {
        when(airCompanyService.create(any(AirCompany.class))).thenReturn(new AirCompany());

        mvc.perform(post("/aircompany/create")
                .param("name")
                .param("companyType")
                .param("foundedAt")
                .param("myFlights")
                .param("myAirplanes")
                .with(csrf())
                .contentType(MediaType.APPLICATION_FORM_URLENCODED))
                .andExpect(model().hasNoErrors())
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/aircompany/all"))
                .andDo(print());

        verifyNoMoreInteractions(airCompanyService);
        verify(airCompanyService, times(1)).create(any(AirCompany.class));
    }

    @Test
    public void testErrorCreatePostMethod() throws Exception {
        AirCompany airCompany = new AirCompany();
        airCompany.setName("");
        airCompany.setCompanyType("");
        airCompany.setFoundedAt("");

        mvc.perform(post("/aircompany/create")
                .param("name", airCompany.getName())
                .param("companyType", airCompany.getCompanyType())
                .param("foundetAt", airCompany.getFoundedAt())

                .with(csrf())
                .contentType(MediaType.APPLICATION_FORM_URLENCODED))
                .andExpect(model().hasErrors())
                .andExpect(status().isOk())
                .andExpect(view().name("create-airCompany"))
                .andExpect(model().size(1))
                .andExpect(model().attribute("airCompany", airCompany))
                .andDo(print());

        verifyNoMoreInteractions(airCompanyService);
    }

    @Test
    public void testReadGetMethod() throws Exception {
        when(airCompanyService.readById(anyLong())).thenReturn(airCompany);

        mvc.perform(get("/aircompany/1/read")
                .contentType(MediaType.TEXT_HTML))
                .andExpect(status().isOk())
                .andExpect(model().size(1))
                .andExpect(model().attribute("aircompany", airCompany))
                .andDo(print());

        verify(airCompanyService, times(1)).readById(anyLong());

        verifyNoMoreInteractions(airCompanyService);
    }

    @Test
    public void testUpdateGetMethod() throws Exception {
        AirCompany airCompany1 = new AirCompany();
        airCompany1.setName("QatarAirways");
        AirCompany airCompany2 = new AirCompany();
        airCompany2.setName("FlyEmirates");

        when(airCompanyService.readById(anyLong())).thenReturn(airCompany);

        mvc.perform(get("/airCompany/1/update")
                .contentType(MediaType.TEXT_HTML))
                .andExpect(status().isOk())
                .andExpect(model().size(2))
                .andExpect(model().attribute("user", airCompany))
                .andExpect(model().attribute("roles", List.of(airCompany1, airCompany2)))
                .andDo(print());

        verify(airCompanyService, times(1)).readById(anyLong());
        verify(airCompanyService, times(1)).getAll();

        verifyNoMoreInteractions(airCompanyService);
    }

    @Test
    public void testErrorUpdatePostMethod() throws Exception {
        AirCompany airCompany1 = new AirCompany();
        airCompany1.setName("QatarAirways");
        AirCompany airCompany2 = new AirCompany();
        airCompany2.setName(12345);
        AirCompany airCompany = new AirCompany();
        airCompany.setId(1L);
        airCompany.setName("");
        airCompany.setCompanyType("");
        airCompany.setFoundedAt("");

        when(airCompanyService.readById(anyLong())).thenReturn(airCompany);

        mvc.perform(post("/airCompany/1/update")
                .param("name", airCompany.getName())
                .param("companyType", airCompany.getCompanyType())
                .param("foundetAt", airCompany.getFoundedAt())
                .with(csrf())
                .contentType(MediaType.APPLICATION_FORM_URLENCODED))
                .andExpect(model().hasErrors())
                .andExpect(status().isOk())
                .andExpect(model().size(2))
                .andExpect(model().attribute("airCompany", airCompany))
                .andDo(print());

        verify(airCompanyService, times(1)).readById(anyLong());
        verify(airCompanyService, times(1)).getAll();

        verifyNoMoreInteractions(airCompanyService);
    }

    @Test
    public void testDeleteGetMethodOneself() throws Exception {
        mvc.perform(get("/airCompany/1/delete")
                .contentType(MediaType.TEXT_HTML))
                .andExpect(status().is3xxRedirection())
                .andDo(print());

        verify(airCompanyService, times(1)).delete(anyLong());

        verifyNoMoreInteractions(airCompanyService);
    }

    @Test
    public void testDeleteGetMethodAnotherUser() throws Exception {
        mvc.perform(get("/airCompany/2/delete")
                .contentType(MediaType.TEXT_HTML))
                .andExpect(status().is3xxRedirection())
                .andDo(print());

        verify(airCompanyService, times(1)).delete(anyLong());

        verifyNoMoreInteractions(airCompanyService);
    }

    @Test
    public void testGetAllGetMethod() throws Exception {
        when(airCompanyService.getAll()).thenReturn(List.of(new AirCompany(), new AirCompany(), new AirCompany()));

        mvc.perform(get("/airCompany/all")
                .contentType(MediaType.TEXT_HTML))
                .andExpect(status().isOk())
                .andExpect(model().size(1))
                .andExpect(model().attribute("airCompany",
                        List.of(new AirCompany(), new AirCompany(), new AirCompany())))
                .andDo(print());

        verify(airCompanyService, times(1)).getAll();

        verifyNoMoreInteractions(airCompanyService);
    }
}